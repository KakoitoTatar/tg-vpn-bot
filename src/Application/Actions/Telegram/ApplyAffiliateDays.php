<?php
declare(strict_types=1);

namespace App\Application\Actions\Telegram;

use App\Application\Auth\JwtAuth;
use GuzzleHttp\Client;
use Psr\Http\Message\ServerRequestInterface;
use Psr\SimpleCache\InvalidArgumentException;
use SergiX44\Nutgram\Conversations\Conversation;
use SergiX44\Nutgram\Nutgram;
use SergiX44\Nutgram\Telegram\Types\Keyboard\InlineKeyboardButton;
use SergiX44\Nutgram\Telegram\Types\Keyboard\InlineKeyboardMarkup;
use SergiX44\Nutgram\Telegram\Types\Keyboard\KeyboardButton;
use SergiX44\Nutgram\Telegram\Types\Keyboard\ReplyKeyboardMarkup;

class ApplyAffiliateDays extends Conversation
{
    /**
     * @var Client
     */
    private Client $client;

    /**
     * @param JwtAuth $jwtAuth
     * @param ServerRequestInterface $request
     */
    public function __construct(
        private readonly JwtAuth                $jwtAuth,
        private readonly ServerRequestInterface $request
    )
    {
        $this->client = new Client([
            'base_uri' => 'http://nginx:83'
        ]);
    }

    /**
     * @param Nutgram $bot
     * @param string $type
     * @return void
     * @throws InvalidArgumentException
     */
    public function start(Nutgram $bot): void
    {
        $type = explode(':', $bot->callbackQuery()->data)[1];
        $client = $this->request->getAttribute('client');

        if ($type === 'new') {
            $connectionRaw = $this->client->post('/api/connections/affiliated', [
                'headers' => ['Authorization' => 'Bearer ' . $this->jwtAuth->createJwt(['id' => $client->getId()])]
            ]);
            $connection = json_decode($connectionRaw->getBody()->getContents(), true);

            $this->next('instructions');
            $bot->sendMessage('üëç');
            $bot->sendMessage(
                '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN.' . PHP_EOL
                . '–°–ª–µ–¥—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ ‚¨áÔ∏è'
            );
            $bot->sendMessage(
                '*[1] –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.* '
                . PHP_EOL . ' –û–Ω–æ  –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.',
                [
                    'parse_mode' => 'markdown',
                    'reply_markup' => InlineKeyboardMarkup::make()
                        ->addRow(InlineKeyboardButton::make('üì± –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤', callback_data: 'mobilesMenu'))
                        ->addRow(InlineKeyboardButton::make('üíª –î–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ ', callback_data: 'pcMenu'))
                ]
            );
            $bot->sendMessage(
                '*[2] –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∏–∂–µ.* ' . PHP_EOL . '–≠—Ç–æ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞. ',
                [
                    'parse_mode' => 'markdown'
                ]
            );
            $bot->sendMessage(
                '`' . $connection['key'] . '`',
                [
                    'parse_mode' => 'markdown'
                ]
            );
            $bot->sendMessage(
                '*–í–∞–∂–Ω–æ ‚ÄºÔ∏è* ' . PHP_EOL . '–ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ –≤–∞—à –∫–ª—é—á –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ–≥–æ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º',
                [
                    'parse_mode' => 'markdown'
                ]
            );
            $bot->sendMessage(
                '*[3] –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ Outline.*' . PHP_EOL
                . '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚Äú+‚Äù –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –≤ –ø–æ–ª–µ. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äú–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä‚Äù.' . PHP_EOL
                . '(–ß–∞—Å—Ç–æ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø–æ–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)',
                [
                    'parse_mode' => 'markdown'
                ]
            );
            $bot->sendMessage(
                '–ù–∞–¥–µ–µ–º—Å—è —á—Ç–æ —É –≤–∞—Å –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –≤—Å–µ –ª–∏ —É –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å?',
                [
                    'parse_mode' => 'markdown',
                    'reply_markup' => ReplyKeyboardMarkup::make(resize_keyboard: true, selective: true)
                        ->addRow(KeyboardButton::make('‚úÖ –î–∞, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'))
                        ->addRow(KeyboardButton::make('üòü –ù–µ—Ç, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'))
                ]
            );
        } else {
            $connectionRaw = $this->client->patch('/api/connections/affiliated/' . $type, [
                'headers' => ['Authorization' => 'Bearer ' . $this->jwtAuth->createJwt(['id' => $client->getId()])]
            ]);

            $connection = json_decode($connectionRaw->getBody()->getContents(), true);

            $bot->sendMessage('‚úÖ –î–æ–±–∞–≤–∏–ª–∏ 10 –¥–Ω–µ–π –∫ —Ç–∞—Ä–∏—Ñ—É:' . PHP_EOL . $connection['name'] . '( –î–æ ' . $connection['activeTo'] . ')');
        }
    }

    /**
     * @param Nutgram $bot
     * @return void
     * @throws InvalidArgumentException
     */
    public function instructions(Nutgram $bot): void
    {
        if ($bot->callbackQuery()->data === 'mobilesMenu') {
            $bot->editMessageText(
                '*[1] –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.* '
                . PHP_EOL . ' –û–Ω–æ  –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.',
                [
                    'parse_mode' => 'markdown',
                    'reply_markup' => InlineKeyboardMarkup::make()
                        ->addRow(
                            InlineKeyboardButton::make(
                                text: 'IOS',
                                url: 'https://itunes.apple.com/app/outline-app/id1356177741'
                            )
                        )->addRow(
                            InlineKeyboardButton::make(
                                text: 'Android',
                                url: 'https://play.google.com/store/apps/details?id=org.outline.android.client'
                            )
                        )->addRow(
                            InlineKeyboardButton::make(
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                                callback_data: 'devicesHome'
                            )
                        )]
            );
        }
        if ($bot->callbackQuery()->data === 'pcMenu') {
            $bot->editMessageText(
                '*[1] –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.* '
                . PHP_EOL . ' –û–Ω–æ  –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.',
                [
                    'parse_mode' => 'markdown',
                    'reply_markup' => InlineKeyboardMarkup::make()
                        ->addRow(
                            InlineKeyboardButton::make(
                                text: 'macOS',
                                url: 'https://itunes.apple.com/app/outline-app/id1356178125'
                            )
                        )->addRow(
                            InlineKeyboardButton::make(
                                text: 'Windows',
                                url: 'https://s3.amazonaws.com/outline-releases/client/windows/stable/Outline-Client.exe'
                            )
                        )->addRow(
                            InlineKeyboardButton::make(
                                text: 'Linux',
                                url: 'https://s3.amazonaws.com/outline-releases/client/linux/stable/Outline-Client.AppImage'
                            )
                        )->addRow(
                            InlineKeyboardButton::make(
                                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                                callback_data: 'devicesHome'
                            )
                        )]
            );
        }
        if ($bot->callbackQuery()->data === 'devicesHome') {
            $bot->editMessageText(
                '*[1] –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline.* '
                . PHP_EOL . ' –û–Ω–æ  –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.',
                [
                    'parse_mode' => 'markdown',
                    'reply_markup' => InlineKeyboardMarkup::make()
                        ->addRow(
                            InlineKeyboardButton::make(
                                'üì± –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤',
                                callback_data: 'mobilesMenu')
                        )
                        ->addRow(
                            InlineKeyboardButton::make(
                                'üíª –î–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ ',
                                callback_data: 'pcMenu')
                        )
                ]
            );
        }
        if ($bot->message()->text === '‚úÖ –î–∞, –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç') {
            $this->successfulConnection($bot);
            return;
        }
        if ($bot->message()->text === 'üòü –ù–µ—Ç, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫') {
            $this->next('reassuring');
            $bot->sendMessage('ü§î');
            $bot->sendMessage('–°—Ç—Ä–∞–Ω–Ω–æ...' . PHP_EOL
                . '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π. –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —ç—Ç–æ—Ç –≤–∏–¥–µ–æ –ø—Ä–∏–º–µ—Ä:'
            );
            $bot->sendMessage('*–ù—É –∫–∞–∫?* –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏–ª–æ—Å—å?', [
                'parse_mode' => 'markdown',
                'reply_markup' => ReplyKeyboardMarkup::make(resize_keyboard: true)
                    ->addRow(KeyboardButton::make('‚úÖ –î–∞, —Å–ø–∞—Å–∏–±–æ!'))
                    ->addRow(KeyboardButton::make('üòü –ù–µ—Ç, –Ω–µ –ø–æ–º–æ–≥–ª–æ'))
            ]);
        }
    }

    /**
     * @param Nutgram $bot
     * @return void
     * @throws InvalidArgumentException
     */
    public function reassuring(Nutgram $bot): void
    {
        if ($bot->message()->text === '‚úÖ –î–∞, —Å–ø–∞—Å–∏–±–æ!') {
            $this->successfulConnection($bot);
            return;
        }
        if ($bot->message()->text === 'üòü –ù–µ—Ç, –Ω–µ –ø–æ–º–æ–≥–ª–æ') {
            $this->next('endConversation');
            $bot->sendMessage('üë©‚Äçüíª',
                ['reply_markup' => ReplyKeyboardMarkup::make(resize_keyboard: true)
                    ->addRow(KeyboardButton::make('‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
                ]);
            $bot->sendMessage('–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ!' . PHP_EOL
                . '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É',
                [
                    'reply_markup' => InlineKeyboardMarkup::make()
                        ->addRow(InlineKeyboardButton::make('üí¨ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', 't.me/fuckin_tatar'))
                ]
            );
        }
    }

    /**
     * @param Nutgram $bot
     * @return void
     * @throws InvalidArgumentException
     */
    private function successfulConnection(Nutgram $bot)
    {
        $this->next('endConversation');
        $bot->sendMessage(
            'üéä',
            [
                'parse_mode' => 'markdown',
                'reply_markup' => InlineKeyboardMarkup::make()
                    ->addRow(InlineKeyboardButton::make(
                        text: '‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
                        url: 'https://t.me/fuckin_tatar'
                    ))
            ]
        );
        $bot->sendMessage(
            '*–û—Ç–ª–∏—á–Ω–æ!*' . PHP_EOL
            . '–†–∞–¥—ã, —á—Ç–æ —É –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ú—ã –±—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –Ω–∞–º –æ—Ç–∑—ã–≤.',
            [
                'parse_mode' => 'markdown',
                'reply_markup' => ReplyKeyboardMarkup::make(resize_keyboard: true)
                    ->addRow(KeyboardButton::make('‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é'))
            ]
        );
    }

    /**
     * @param Nutgram $bot
     * @return void
     * @throws InvalidArgumentException
     */
    public function endConversation(Nutgram $bot)
    {
        if ($bot->message()->text === '‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é') {
            $this->toMain($bot);
        }
    }

    /**
     * @param Nutgram $bot
     * @return void
     * @throws InvalidArgumentException
     */
    public function toMain(Nutgram $bot): void
    {
        /** @var \App\Domain\Client\Client $client */
        $client = $this->request->getAttribute('client');
        $bot->endConversation($client->getId(), $client->getId());
        $keyboard = ReplyKeyboardMarkup::make(resize_keyboard: true, selective: true);
        $keyboard->addRow(KeyboardButton::make('üëÅÔ∏è –ú–æ–π —Ç–∞—Ä–∏—Ñ'), KeyboardButton::make('üí≤ –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ'));
        $keyboard->addRow(KeyboardButton::make('üí∞ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞'));
        $keyboard->addRow(KeyboardButton::make('‚ÅâÔ∏è –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'));
        $bot->sendMessage(
            '–ì–ª–∞–≤–Ω–∞—è üè†',
            [
                'parse_mode' => 'markdown',
                'reply_markup' => $keyboard
            ]
        );
    }
}